(*Task 1*)
(*Flood*)
(*a. Write a function print_int_matrix : int array array -> unit = <
fun> That prints a rectangular integer matrix on screen.*)
(*b. Write a function flood : ’a array array -> ’a -> unit = <fun> that
changes the values of the input matrix according to the rules of the game
Flood: https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/
flood.html. In short, it changes the value of the top left element, along
with every element of the same value that is reachable from it, to the
specified ’a value. An element is reachable if there exist a path from the
top left element by going down, left, up, right along same value elements.*)
(*Solutions*)
(a) let print_int_matrix matrix =
  let rows = Array.length matrix in
  let cols = Array.length matrix.(0) in
  let print_element element =
    let string_value = string_of_int element in
    let padding = max 0 (4 - String.length string_value) in
    let padded_value = String.make padding ' ' ^ string_value in
    print_string padded_value
  in
  let print_separator_line =
    for _ = 1 to cols do
      print_string "----";
    done;
    print_newline()
  in
  print_separator_line;
  for i = 0 to rows - 1 do
    for j = 0 to cols - 1 do
      print_string "| ";
      print_element matrix.(i).(j);
      print_string " ";
    done;
    print_string "|";
    print_newline();
    print_separator_line;
  done;;
(*case*)
let example_matrix = [|
  [|1; 2; 3|];
  [|4; 5; 6|];
  [|7; 8; 9|]
|];;

print_int_matrix example_matrix;;
(b) let flood matrix value =
  let rows = Array.length matrix in
  let cols = Array.length matrix.(0) in
  let top_left_value = matrix.(0).(0) in
  let visited = Array.make_matrix rows cols false in
  let rec flood_fill row col =
    if row < 0 || row >= rows || col < 0 || col >= cols then
      ()
    else if matrix.(row).(col) <> top_left_value || visited.(row).(col) then
      ()
    else begin
      matrix.(row).(col) <- value;
      visited.(row).(col) <- true;
      flood_fill (row+1) col;
      flood_fill row (col-1);
      flood_fill (row-1) col;
      flood_fill row (col+1);
    end
  in
  flood_fill 0 0;;
(*case*)
let example_matrix = [|
  [|1; 1; 2|];
  [|1; 2; 2|];
  [|3; 3; 1|]
|];;
print_int_matrix example_matrix;;
print_newline ();;
flood example_matrix 9;;
print_int_matrix example_matrix;;
-----------------------------------------------------------------------------
(*Task 2*)
(*Screen*)
(*You are given the type
1 type pixel ={ r : int ; g : int ; b : int };;
representing a pixel and the intensity of red, green and blue, as integers between
0 and 255.*)
(*a.Write a function brightness : int -> pixel array array -> pixel
array array = <fun> that increases/decreases all integers in all pixels
in the input pixel array array by the provided integer. The resulting
integers should not go below 0 or above 255.*)
(*b.Write a function blur : pixel array array -> pixel array array
= <fun> that blurs the input pixel array array. Pixels on the border
are unchanged, all other pixels colors however are recomputed. The new
value is 60% of the original + 5% of every neighboring pixel (out of 8).
Round down at the very end.*)
(*Solutions*)
(a) let clamp value min_val max_val =
max min_val (min value max_val)
let brightness delta pixels =
Array.map (fun row ->
Array.map (fun pixel ->
let r' = clamp (pixel.r + delta) 0 255 in
let g' = clamp (pixel.g + delta) 0 255 in
let b' = clamp (pixel.b + delta) 0 255 in
{r=r'; g=g'; b=b'}) row) 
pixels
(*case*)
type pixel = { r : int; g : int; b : int }
let clamp value min_val max_val =
  max min_val (min value max_val)
let brightness delta pixels =
  Array.map (fun row ->
    Array.map (fun pixel ->
      let r' = clamp (pixel.r + delta) 0 255 in
      let g' = clamp (pixel.g + delta) 0 255 in
      let b' = clamp (pixel.b + delta) 0 255 in
      { r = r'; g = g'; b = b' }
    ) row
  ) pixels
let example_pixels = [|
  [| { r = 100; g = 150; b = 200 }; { r = 50; g = 75; b = 100 } |];
  [| { r = 0; g = 0; b = 0 }; { r = 255; g = 255; b = 255 } |]
|]
let result = brightness 50 example_pixels
let print_pixels pixels =
  Array.iter (fun row ->
    Array.iter (fun pixel ->
      print_string "(";
      print_int pixel.r; print_string ", ";
      print_int pixel.g; print_string ", ";
      print_int pixel.b; print_string ") ";
    ) row;
    print_newline ();
  ) pixels
print_pixels example_pixels
print_newline ()
print_pixels result

(b) let blur pixels =
let rows = Array.length pixels in
let cols = Array.length pixels.(0) in
let new_pixels = Array.make_matrix rows cols {r=0; g=0; b=0} in
for i = 1 to rows - 2 do
for j = 1 to cols - 2 do
let p = pixels.(i).(j) in
let r = (p.r +
pixels.(i-1).(j-1).r + pixels.(i-1).(j).r + pixels.(i-1).(j+1).r +
pixels.(i).(j-1).r + pixels.(i).(j+1).r +
pixels.(i+1).(j-1).r + pixels.(i+1).(j).r + pixels.(i+1).(j+1).r) / 9 in
let g = (p.g +
pixels.(i-1).(j-1).g + pixels.(i-1).(j).g + pixels.(i-1).(j+1).g +
pixels.(i).(j-1).g + pixels.(i).(j+1).g +
pixels.(i+1).(j-1).g + pixels.(i+1).(j).g + pixels.(i+1).(j+1).g) / 9 in
let b = (p.b +
pixels.(i-1).(j-1).b + pixels.(i-1).(j).b + pixels.(i-1).(j+1).b +
pixels.(i).(j-1).b + pixels.(i).(j+1).b +
pixels.(i+1).(j-1).b + pixels.(i+1).(j).b + pixels.(i+1).(j+1).b) / 9 in
new_pixels.(i).(j) <- {r=r; g=g; b=b}
done
done;
new_pixels
(*case*)
type pixel = { r : int; g : int; b : int }
let blur pixels =
  let rows = Array.length pixels in
  let cols = Array.length pixels.(0) in
  let new_pixels = Array.make_matrix rows cols { r = 0; g = 0; b = 0 } in
  for i = 1 to rows - 2 do
    for j = 1 to cols - 2 do
      let p = pixels.(i).(j) in
      let r = (p.r +
               pixels.(i-1).(j-1).r + pixels.(i-1).(j).r + pixels.(i-1).(j+1).r +
               pixels.(i).(j-1).r + pixels.(i).(j+1).r +
               pixels.(i+1).(j-1).r + pixels.(i+1).(j).r + pixels.(i+1).(j+1).r) / 9 in
      let g = (p.g +
               pixels.(i-1).(j-1).g + pixels.(i-1).(j).g + pixels.(i-1).(j+1).g +
               pixels.(i).(j-1).g + pixels.(i).(j+1).g +
               pixels.(i+1).(j-1).g + pixels.(i+1).(j).g + pixels.(i+1).(j+1).g) / 9 in
      let b = (p.b +
               pixels.(i-1).(j-1).b + pixels.(i-1).(j).b + pixels.(i-1).(j+1).b +
               pixels.(i).(j-1).b + pixels.(i).(j+1).b +
               pixels.(i+1).(j-1).b + pixels.(i+1).(j).b + pixels.(i+1).(j+1).b) / 9 in
      new_pixels.(i).(j) <- { r = r; g = g; b = b }
    done
  done;
  new_pixels
let example_pixels = [|
  [| { r = 100; g = 150; b = 200 }; { r = 50; g = 75; b = 100 }; { r = 80; g = 120; b = 160 } |];
  [| { r = 30; g = 60; b = 90 }; { r = 200; g = 220; b = 240 }; { r = 10; g = 20; b = 30 } |];
  [| { r = 70; g = 90; b = 110 }; { r = 130; g = 160; b = 190 }; { r = 240; g = 250; b = 255 } |]
|]
let print_pixels pixels =
  Array.iter (fun row ->
    Array.iter (fun pixel ->
      print_string "(";
      print_int pixel.r; print_string ", ";
      print_int pixel.g; print_string ", ";
      print_int pixel.b; print_string ") ";
    ) row;
    print_newline ();
  ) pixels
let blurred_pixels = blur example_pixels
print_pixels example_pixels
print_newline ()
print_pixels blurred_pixels
-------------------------------------------------------------------------------
(*Task 3*)
(*Tressette*)
(*You are given the types:
1 type colore = Spade | Coppa | Bastoni | Denari ;;
2 type valore = Ace | Two | Three | Four | Five | Six |
Seven | Jack | Knight | King ;;
3 type mazzo = Null | Carta of carta and carta ={ c : colore ; v
: valore ; mutable tl : mazzo };;*)
(*a. Write a function points : mazzo -> int = <fun> The given a deck of
cards it calculates the point score of it. The scoring is as follows: Ace is
worth 1 point; Two, Three, King, Knight, Jack are each worth 1/3; and the 
rest do not contribute the the point total. The total point score is equal
to the sum of the individual points, rounded down at the end.*)
(*b. Write a function max_cards : mazzo -> mazzo = <fun> that takes a
deck of cards and filters out everything except the highest cards by value
(valore) of any color. The order of cards by value is as follows: Three >
Two > Ace > King > Knight > Jack > Seven > Six > Five > Four.
Due to the size of the output, lists like generate_cards 20 2023 are not shown,
but can be generated with the use of the attached function.*)
(*Solutions*)
(a) type colore = Spade | Coppa | Bastoni | Denari ;;
type valore = Ace | Two | Three | Four | Five | Six | Seven | Jack | Knight | King ;;
type carta = { c : colore ; v : valore ; mutable tl : mazzo }
and mazzo = Null | Carta of carta ;;
let points deck =
let rec points_helper acc curr =
match curr with
| Null -> acc
| Carta { v = Ace; tl = next } ->
points_helper (acc + 1) next
| Carta { v = Two; tl = next } ->
points_helper (acc + 1) next
| Carta { v = Three; tl = next } ->
points_helper (acc + 1) next
| Carta { v = King; tl = next } ->
points_helper (acc + 1) next
| Carta { v = Knight; tl = next } ->
points_helper (acc + 1) next
| Carta { v = Jack; tl = next } ->
points_helper (acc + 1) next
| Carta { v = Seven; tl = next } ->
points_helper (acc + 1) next
| Carta { tl = next } ->
points_helper acc next
in
let total_points = points_helper 0 deck in
let fractional_points = float_of_int total_points /. 3.0 in
int_of_float fractional_points
(*case*)
type colore = Spade | Coppa | Bastoni | Denari ;;
type valore = Ace | Two | Three | Four | Five | Six | Seven | Jack | Knight | King ;;
type carta = { c : colore ; v : valore ; mutable tl : mazzo }
and mazzo = Null | Carta of carta ;;
let rec points_helper acc curr =
  match curr with
  | Null -> acc
  | Carta { v = Ace; tl = next } ->
    points_helper (acc + 1) next
  | Carta { v = Two; tl = next } ->
    points_helper (acc + 1) next
  | Carta { v = Three; tl = next } ->
    points_helper (acc + 1) next
  | Carta { v = King; tl = next } ->
    points_helper (acc + 1) next
  | Carta { v = Knight; tl = next } ->
    points_helper (acc + 1) next
  | Carta { v = Jack; tl = next } ->
    points_helper (acc + 1) next
  | Carta { v = Seven; tl = next } ->
    points_helper (acc + 1) next
  | Carta { tl = next } ->
    points_helper acc next
let points deck =
  let total_points = points_helper 0 deck in
  let fractional_points = float_of_int total_points /. 3.0 in
  int_of_float fractional_points
let example_deck = 
  Carta { c = Spade; v = Ace; tl = 
    Carta { c = Coppa; v = Four; tl =
      Carta { c = Bastoni; v = Seven; tl =
        Carta { c = Denari; v = Jack; tl =
          Null
        }
      }
    }
  }
let deck_points = points example_deck
print_endline ("Deck points: " ^ string_of_int deck_points)

(b) type colore = Spade | Coppa | Bastoni | Denari ;;
type valore = Ace | Two | Three | Four | Five | Six | Seven | Jack | Knight | King ;;
type carta = { c : colore ; v : valore ; mutable tl : mazzo }
and mazzo = Null | Carta of carta ;;
let max_cards deck =
let card_value_order = [Three; Two; Ace; King; Knight; Jack; Seven; Six; Five; Four] in
let rec find_max_value acc curr max_val =
match curr with
| Null -> acc
| Carta { v = value; c = _; tl = next } ->
if List.mem value card_value_order && List.index_of value card_value_order > List.index_of max_val card_value_order then
find_max_value [curr] next value
else if List.mem value card_value_order && List.index_of value card_value_order = List.index_of max_val card_value_order then
find_max_value (curr :: acc) next max_val
else
find_max_value acc next max_val
in
let max_values = find_max_value [] deck Four in
let rec filter_max_values acc curr max_values =
match curr with
| Null -> acc
| Carta { v = value; c = _; tl = next } ->
if List.mem curr max_values then
filter_max_values (Carta { c = curr.c; v = curr.v; tl = acc } ) next max_values
else
filter_max_values acc next max_values
in
let filtered_deck = filter_max_values Null deck max_values in
filtered_deck
(*case*)
type colore = Spade | Coppa | Bastoni | Denari ;;
type valore = Ace | Two | Three | Four | Five | Six | Seven | Jack | Knight | King ;;
type carta = { c : colore ; v : valore ; mutable tl : mazzo }
and mazzo = Null | Carta of carta ;;
let card_value_order = [Three; Two; Ace; King; Knight; Jack; Seven; Six; Five; Four]
let rec find_max_value acc curr max_val =
  match curr with
  | Null -> acc
  | Carta { v = value; c = _; tl = next } ->
    if List.mem value card_value_order && List.index_of value card_value_order > List.index_of max_val card_value_order then
      find_max_value [curr] next value
    else if List.mem value card_value_order && List.index_of value card_value_order = List.index_of max_val card_value_order then
      find_max_value (curr :: acc) next max_val
    else
      find_max_value acc next max_val
let max_cards deck =
  let max_values = find_max_value [] deck Four in
  let rec filter_max_values acc curr max_values =
    match curr with
    | Null -> acc
    | Carta { v = value; c = _; tl = next } ->
      if List.mem curr max_values then
        filter_max_values (Carta { c = curr.c; v = curr.v; tl = acc }) next max_values
      else
        filter_max_values acc next max_values
  in
  let filtered_deck = filter_max_values Null deck max_values in
  filtered_deck
let example_deck =
  Carta { c = Spade; v = Two; tl =
    Carta { c = Coppa; v = Four; tl =
      Carta { c = Bastoni; v = Seven; tl =
        Carta { c = Denari; v = King; tl =
          Carta { c = Spade; v = Five; tl =
            Null
          }
        }
      }
    }
  }

let print_deck deck =
  let rec print_cards curr =
    match curr with
    | Null -> ()
    | Carta { c = col; v = val_; tl = next } ->
      print_string "(";
      print_endline (match col with Spade -> "Spade" | Coppa -> "Coppa" | Bastoni -> "Bastoni" | Denari -> "Denari");
      print_endline (match val_ with Ace -> "Ace" | Two -> "Two" | Three -> "Three" | Four -> "Four" | Five -> "Five" | Six -> "Six" | Seven -> "Seven" | Jack -> "Jack" | Knight -> "Knight" | King -> "King");
      print_string ")";
      print_cards next
  in
  print_cards deck;
  print_newline ()
let max_cards_deck = max_cards example_deck
print_deck example_deck
print_newline ()
print_deck max_cards_deck
-------------------------------------------------------------------------------
(*Name Surname, Student ID, Study program, Assistant surname*)
(*Anastasija Temova, 89221055, Computer Science EN, Šišič*)
